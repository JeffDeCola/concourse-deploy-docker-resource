#!/bin/bash
# concourse-deploy-docker-resource check

set -e              # Will exit immediate if command exits with non-zero status
set -u              # Will print message if variable not set,
# set -x            # Prints the shell commands +
set -o pipefail     # Fail on a pipline like cmd1 | cmd2 | cmd3, rather then wait

exec 3>&1           # Make stdout available as fd 3 for the result
exec 1>&2           # Redirect all output to stderr for logging

# WHAT IS THIS?
echo "CHECK"
echo "I made the version 0.0.5 to make this easy"
echo ""

# CURRENT DIRECTORY
echo "pwd is"
pwd 
echo ""
echo "ls directory"
ls -lat 
echo ""

echo "PART 1 - INPUT ********************************************************************************"
echo "parse stdin"
echo ""

# READ stdin (which is json paramter) TO A FILE
# -M = Monochrome output
# -S = Sort order
# . =  get everything
jq -M -S . <&0 | tee get_input.json >/dev/null    # tee redirects to a file.

echo "json stdin is:"
cat get_input.json
echo ""

# PARSE THE JSON FILE get_input.json 
username=$(jq -r .source.username < get_input.json)
password=$(jq -r .source.password < get_input.json)
input_version=$(jq -r .version.ref < get_input.json)

# PRINT OUT THE INPUT
echo "source are:"
echo "    $username"
echo "    $password"
echo "version is:"
echo "    $input_version"
echo ""

echo "PART 2 - CHECK/UPDATE VERSION *****************************************************************"
echo "You have the source info and the version"
echo ""

# Here you would check the version and get the next version
# I will just use the version I have

if [ "$input_version" == "null" ]
then
    version="0.0.5"
else
    version=$input_version
fi

echo "The version is $version"
echo ""

echo "PART 3 - OUTPUT *******************************************************************************"
echo "send stdout"
echo ""

# CREATE OUTPUT
json_check_output='[
    { "ref": "'$version'" }
]'

jq -n "$json_check_output" > check_output.json

echo "json stdout is:"
cat check_output.json
echo ""

echo "ls directory"
ls -lat 
echo ""

# OUTPUT JSON TO STDOUT
# -n don't read any input at all.  Construct froms scratch.
jq -n "$json_check_output" >&3
