#!/bin/bash
# concourse-deploy-docker-resource in

set -e              # Will exit immediate if command exits with non-zero status
set -u              # Will print message if variable not set,
# set -x            # Prints the shell commands +
set -o pipefail     # Fail on a pipline like cmd1 | cmd2 | cmd3, rather then wait

exec 3>&1           # Make stdout available as fd 3 for the result
exec 1>&2           # Redirect all output to stderr for logging

# WHAT IS THIS?
echo "OUT - PUT"
echo "I made the version 0.0.5 to make this easy"
echo ""

# CURRENT DIRECTORY
echo "pwd is"
pwd 
echo ""
echo "ls directory"
ls -lat 
echo ""

# CD WORKING DIRECTORY
WORKING_DIR=$1
echo "WORKING_DIR = $WORKING_DIR"
cd "$WORKING_DIR"
echo "pwd is"
pwd 
echo ""
echo "ls directory"
ls -lat 
echo ""

# REMEMBER WE ADDED TREE BINARY INTO THE BUILD.
#echo "tree - Not sure there is anything to show here."
#tree
#echo ""

echo "PART 1 - INPUT ********************************************************************************"
echo "parse stdin"
echo ""

# READ stdin (which is json paramter) TO A FILE
# -M = Monochrome output
# -S = Sort order
# . =  get everything
jq -M -S . <&0 | tee put_input.json >/dev/null    # tee redirects to a file.

echo "json stdin is:"
cat put_input.json
echo ""

# PARSE THE JSON FILE put_input.json 
username=$(jq -r .source.username < put_input.json)
password=$(jq -r .source.password < put_input.json)

docker_host_ip=$(jq -r .params.DOCKER_HOST_IP < put_input.json)
docker_host_port=$(jq -r .params.DOCKER_HOST_PORT < put_input.json)
docker_host_user=$(jq -r .params.DOCKER_HOST_USER < put_input.json)
docker_host_run_priviledged_mode=$(jq -r .params.DOCKER_HOST_RUN_PRIVILEGED_MODE < put_input.json)
docker_host_ssh_private_key_file=$(jq -r .params.DOCKER_HOST_SSH_PRIVATE_KEY_FILE < put_input.json)
docker_image_to_deploy=$(jq -r .params.DOCKER_IMAGE_TO_DEPLOY < put_input.json)

# GET DOCKERHUB USERNAME AND IMAGENAME
dockerhub_username=${docker_image_to_deploy%/*}
dockerhub_imagename=${docker_image_to_deploy#*/}

# PRINT OUT THE INPUT
echo "source are:"
echo "    $username"
echo "    $password"
echo "params are:"
echo "    $docker_host_ip"
echo "    $docker_host_port"
echo "    $docker_host_user"
echo "    $docker_host_run_priviledged_mode"
echo "    docker_host_ssh_private_key_file - See above"
echo "    $docker_image_to_deploy"
echo "    $dockerhub_username"
echo "    $dockerhub_imagename"
echo ""

# SOME METATDATA
echo "BUILD_ID = $BUILD_ID"
echo "BUILD_NAME = $BUILD_NAME"
echo "BUILD_JOB_NAME = $BUILD_JOB_NAME"
echo "BUILD_PIPELINE_NAME = $BUILD_PIPELINE_NAME"
echo "ATC_EXTERNAL_URL = $ATC_EXTERNAL_URL"
echo ""

echo "PART 2 - PUT SOMETHING ************************************************************************"
echo "DEPLOY DOCKER IMAGE TO A DOCKER HOST"
echo "You have the source and params"
echo ""

# MIMIC - MUST GET SAME VERSION TO CHECK - THIS IS NOT PASSED
# **************
version=v0.0.5
# **************

# PUT PRIVATE KEY IN FILE
echo "Put private key in temp file"
echo "$docker_host_ssh_private_key_file" >> private-key-file.txt
# cat private-key-file.txt
chmod 600 private-key-file.txt
echo " "

# STOP OLD CONTAINERS IF IT EXISTS ON HOST
echo "Stop old container if it exists - Ignore if you get an error"
echo "docker stop $dockerhub_imagename || true "
ssh -o StrictHostKeyChecking=no \
    -i private-key-file.txt -p "$docker_host_port" "$docker_host_user"@"$docker_host_ip" \
    'docker stop '$dockerhub_imagename' || true'
echo " "

# REMOVE OLD CONTAINERS IF IT EXISTS ON HOST
echo "Remove old container if it exsits - Ignore if you get an error"
echo "docker rm $dockerhub_imagename || true"
ssh -o StrictHostKeyChecking=no \
    -i private-key-file.txt -p "$docker_host_port" "$docker_host_user"@"$docker_host_ip" \
    'docker rm '$dockerhub_imagename' || true'
echo " "

# DOCKER LOGIN ON HOST
# echo "docker login"
# echo "echo password | docker login -u username --password-stdin"
# ssh -o StrictHostKeyChecking=no \
#     -i private-key-file.txt -p "$docker_host_port" "$docker_host_user"@"$docker_host_ip" \
#    'echo '$password' | docker login -u '$username' --password-stdin || true'

if [ "$docker_host_run_priviledged_mode" = "true" ]; then
    # DOCKER RUN ON HOST (PRIVILEDGED MODE)
    echo "docker run"
    echo "export PATH=\$PATH:/usr/local/bin; docker run --privileged --name $dockerhub_imagename -dit '$dockerhub_username'/$dockerhub_imagename"
    ssh -o StrictHostKeyChecking=no \
        -i private-key-file.txt -p "$docker_host_port" "$docker_host_user"@"$docker_host_ip" \
        'export PATH=$PATH:/usr/local/bin; docker run --privileged --name '$dockerhub_imagename' -dit '$dockerhub_username'/'$dockerhub_imagename''
    echo " "  
else
    # DOCKER RUN ON HOST
    echo "docker run"
    echo "export PATH=\$PATH:/usr/local/bin; docker run --name $dockerhub_imagename -dit '$dockerhub_username'/$dockerhub_imagename"
    ssh -o StrictHostKeyChecking=no \
        -i private-key-file.txt -p "$docker_host_port" "$docker_host_user"@"$docker_host_ip" \
        'export PATH=$PATH:/usr/local/bin; docker run --name '$dockerhub_imagename' -dit '$dockerhub_username'/'$dockerhub_imagename''
    echo " "
fi

# REMOVE PRIVATE KEY FILE
echo "rm private-key-file.txt"
rm private-key-file.txt
echo " "

echo "You can now run docker commands such as:"
echo "docker run --name $dockerhub_imagename -dit '$dockerhub_username'/$dockerhub_imagename"
echo "docker exec -i -t $dockerhub_imagename /bin/bash"
echo "docker logs $dockerhub_imagename"
echo "docker rm -f $dockerhub_imagename"
echo " "

author="jeff decola"

echo "PART 3 - OUTPUT *******************************************************************************"
echo "send stdout"
echo ""

# CREATE OUTPUT
json_put_output='{
    "version":{ "ref": "'$version'" },
    "metadata": [
        { "name": "author", "value": "'$author'" },
        { "name": "executable", "value": "out" },
        { "name": "version", "value": "'$version'" }
    ]
}'
jq -n "$json_put_output" > put_output.json

echo "json stdout is:"
cat put_output.json
echo ""

echo "ls directory"
ls -lat 
echo ""

# OUTPUT JSON TO STDOUT
# -n don't read any input at all.  Construct froms scratch.
jq -n "$json_put_output" >&3
